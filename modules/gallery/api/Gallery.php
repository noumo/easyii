<?php
namespace yii\easyii\modules\gallery\api;

use Yii;

use yii\easyii\models\Photo;
use yii\easyii\modules\gallery\models\Category;
use yii\easyii\widgets\Fancybox;
use yii\web\NotFoundHttpException;

/**
 * Gallery module API
 * @package yii\easyii\modules\gallery\api
 *
 * @method static CategoryObject cat(mixed $id_slug) Get gallery category by id or slug
 * @method static array tree() Get gallery categories as tree
 * @method static array cats() Get gallery categories as flat array
 * @method static PhotoObject get(int $id) Get photo object by id
 * @method static mixed last(int $limit = 1, mixed $where = null) Get last photos, use $where option for fetching photos from special category
 * @method static void plugin() Applies FancyBox widget on photos called by box() function
 * @method static string pages() returns pagination html generated by yii\widgets\LinkPager widget.
 * @method static \stdClass pagination() returns yii\data\Pagination object.
 */

class Gallery extends \yii\easyii\components\API
{
    private $_cats;
    private $_photos;

    public function api_cat($id_slug)
    {
        if(!isset($this->_cats[$id_slug])) {
            $this->_cats[$id_slug] = new CategoryObject(Category::get($id_slug));
        }
        return $this->_cats[$id_slug];
    }

    public function api_tree()
    {
        return Category::tree();
    }

    public function api_cats($options = [])
    {
        $result = [];
        foreach(Category::cats() as $model){
            $result[] = new CategoryObject($model);
        }
        if(!empty($options['tags'])){
            foreach($result as $i => $item){
                if(!in_array($options['tags'], $item->tags)){
                    unset($result[$i]);
                }
            }
        }

        return $result;
    }

    public function api_last($limit = 1, $where = null)
    {
        $result = [];

        $query = Photo::find()->where(['class' => Category::className()])->sort()->limit($limit);
        if($where){
            $query->andWhere($where);
        }

        foreach($query->all() as $item){
            $photoObject = new PhotoObject($item);
            $photoObject->rel = 'last';
            $result[] = $photoObject;
        }
        return $result;
    }

    public function api_get($id)
    {
        if(!isset($this->_photos[$id])) {
            $this->_photos[$id] = $this->findPhoto($id);
        }
        return $this->_photos[$id];
    }

    public function api_plugin($options = [])
    {
        Fancybox::widget([
            'selector' => '.easyii-box',
            'options' => $options
        ]);
    }

    private function findPhoto($id)
    {
        if(!($photo = Photo::findOne($id))) {
            throw new NotFoundHttpException(Yii::t('easyii', 'Not found'));
        }
        return new PhotoObject($photo);
    }
}